module AssetAggregator
  module OutputHandlers
    # An #AssetAggregator::Core::OutputHandler that writes output in a flexible
    # form that's compatible with Javascript and CSS both.
    class CommonOutputHandler < AssetAggregator::Core::OutputHandler
      def extension
        raise "You must instantiate a subclass that overrides #extension"
      end
      
      def start_all
        case options[:header_comment]
        when nil, :none, false then
          # nothing
        when :brief then
          output "/* '#{subpath}.#{extension}' */"
        when :full then
          output <<-END
/************************************************************************
 * '#{subpath}.#{extension}'
 *
 * This file is GENERATED by the AssetAggregator; do not edit it.
 * This version was generated at #{Time.now}
 ************************************************************************/
END
        else
          raise "Unknown header comment option #{options[:header_comment].inspect}"
        end
      end

      def start_aggregator(aggregator)
        brief_string = "/* #{aggregator} */"
        
        case options[:aggregator_comment]
        when nil, :none, false then
          # nothing
        when :brief then
          output brief_string
        when :obscured then
          output brief_string
        when :full then
          output <<-END


/************************************************************************
 * #{aggregator}
 ************************************************************************/

END
        else
          raise "Unknown aggregator comment option #{options[:aggregator_comment].inspect}"
        end
      end
      
      def start_fragment(aggregator, fragment)
        brief_string = "/* #{fragment.source_position} */"
        
        case options[:fragment_comment]
        when nil, :none, false then
          # nothing
        when :brief then
          output brief_string
        when :obscured then
          output brief_string
        when :full then
          output <<-END
/* ----------------------------------------------------------------------
   - #{fragment.source_position}
   ---------------------------------------------------------------------- */
END
        else
          raise "Unknown fragment comment option #{options[:fragment_comment].inspect}"
        end
      end
    end
  end
end
